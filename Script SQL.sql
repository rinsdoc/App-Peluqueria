-- Creación de las tablas de la base de datos.
CREATE TABLE PROVEEDOR(
IDPROVEEDOR NUMBER PRIMARY KEY NOT NULL,
NOMBRE VARCHAR(50) NOT NULL,
TELEFONO NUMBER(9) NOT NULL
);

CREATE TABLE PRODUCTO(
IDPRODUCTO NUMBER PRIMARY KEY NOT NULL,
NOMBRE VARCHAR(50) NOT NULL,
PRECIO NUMBER(4,2) NOT NULL,
STOCK NUMBER NOT NULL
);

CREATE TABLE PEDIDO(
IDPEDIDO NUMBER PRIMARY KEY NOT NULL,
ESTADO VARCHAR(50) NOT NULL,
FECHA_COMPRA DATE NOT NULL
);

CREATE TABLE LINEA_PEDIDO(
IDLINEAP NUMBER NOT NULL,
UNIDADES NUMBER NOT NULL,
IDPEDIDO NUMBER NOT NULL,
CONSTRAINT IDLINEAP PRIMARY KEY(IDLINEAP, IDPEDIDO),
CONSTRAINT IDPEDIDO_FK FOREIGN KEY (IDPEDIDO) REFERENCES PEDIDO(IDPEDIDO)
);
CREATE TABLE FACTURA(
IDFACTURA NUMBER NOT NULL,
FECHA DATE NOT NULL,
TOTAL NUMBER(10,2) NOT NULL,
METODO_PAGO VARCHAR2(8) NOT NULL,
CONSTRAINT IDFACTURA PRIMARY KEY(IDFACTURA)
);

CREATE TABLE LINEA_FACTURA(
IDFACTURA NUMBER NOT NULL,
IDLINEAF NUMBER NOT NULL,
CONSTRAINT IDLINEAF PRIMARY KEY(IDLINEAF, IDFACTURA),
CONSTRAINT IDFACTURA_FK FOREIGN KEY(IDFACTURA) REFERENCES FACTURA (IDFACTURA)
);

CREATE TABLE TRATAMIENTO_CAPILAR(
NOMBRE VARCHAR2(50) NOT NULL,
PRECIO NUMBER(4,2) NOT NULL,
DURACION NUMBER NOT NULL,
CONSTRAINT NOMBRE PRIMARY KEY(NOMBRE)
);

CREATE TABLE CLIENTE(
IDCLIENTE NUMBER NOT NULL,
NOMBRE VARCHAR2(50) NOT NULL,
APE1 VARCHAR2(50) NOT NULL,
APE2 VARCHAR2(50) CHECK (APE2 IS NULL OR LENGTH(APE2) <= 100),
TELEFONO NUMBER(9) NOT NULL,
CONSTRAINT IDCLIENTE PRIMARY KEY(IDCLIENTE)
);

CREATE TABLE SERVICIOS(
IDSERVICIO NUMBER NOT NULL,
IDPRODUCTO_FK NUMBER NOT NULL,
NOMBRE_FK VARCHAR2(50) NOT NULL,
CONSTRAINT IDSERVICIO PRIMARY KEY(IDSERVICIO),
CONSTRAINT IDPRODUCTO_FK FOREIGN KEY(IDPRODUCTO_FK) REFERENCES PRODUCTO (IDPRODUCTO),
CONSTRAINT NOMBRE_FK FOREIGN KEY(NOMBRE_FK) REFERENCES TRATAMIENTO_CAPILAR (NOMBRE)
);

CREATE TABLE VENDE(
CANTIDAD NUMBER NOT NULL,
PRECIO_TOTAL NUMBER(8,2) NOT NULL,
IDPROVEEDOR_FK NUMBER NOT NULL,
IDPRODUCTOV_FK NUMBER NOT NULL,
CONSTRAINT IDPROVEEDOR_FK FOREIGN KEY(IDPROVEEDOR_FK) REFERENCES PROVEEDOR (IDPROVEEDOR),
CONSTRAINT IDPRODUCTOV_FK FOREIGN KEY(IDPRODUCTOV_FK) REFERENCES PRODUCTO (IDPRODUCTO)
);

CREATE TABLE GENERA(
IDSERVICIOG_FK NUMBER NOT NULL,
IDFACTURAG_FK NUMBER NOT NULL,
CONSTRAINT GENERAPK PRIMARY KEY (IDSERVICIOG_FK, IDFACTURAG_FK),
CONSTRAINT IDSERVICIOG_FK FOREIGN KEY(IDSERVICIOG_FK) REFERENCES SERVICIOS (IDSERVICIO),
CONSTRAINT IDFACTURAG_FK FOREIGN KEY(IDFACTURAG_FK) REFERENCES FACTURA (IDFACTURA)
);
 
CREATE TABLE PIDE_CITA(
NOMBREC_FK VARCHAR(50) NOT NULL,
IDCLIENTE_FK NUMBER NOT NULL,
ESTADO VARCHAR2(10) NOT NULL,
FECHA_CITA DATE NOT NULL,
CONSTRAINT NOMBREC_FK FOREIGN KEY(NOMBREC_FK) REFERENCES TRATAMIENTO_CAPILAR (NOMBRE),
CONSTRAINT IDCLIENTE_FK FOREIGN KEY(IDCLIENTE_FK) REFERENCES CLIENTE (IDCLIENTE)
);


-- Insertar datos en la tabla PROVEEDOR
INSERT INTO PROVEEDOR (idProveedor, nombre, telefono) VALUES (1, 'Proveedor A', 123456789);
INSERT INTO PROVEEDOR (idProveedor, nombre, telefono) VALUES (2, 'Proveedor B', 987654321);
INSERT INTO PROVEEDOR (idProveedor, nombre, telefono) VALUES (3, 'Proveedor C', 555123456);
INSERT INTO PROVEEDOR (idProveedor, nombre, telefono) VALUES (4, 'Proveedor D', 555987654);
INSERT INTO PROVEEDOR (idProveedor, nombre, telefono) VALUES (5, 'Proveedor E', 555111222);

-- Insertar datos en la tabla PRODUCTO
INSERT INTO PRODUCTO (idProducto, nombre, precio, stock) VALUES (1, 'Producto X', 10.99, 100);
INSERT INTO PRODUCTO (idProducto, nombre, precio, stock) VALUES (2, 'Producto Y', 5.99, 50);
INSERT INTO PRODUCTO (idProducto, nombre, precio, stock) VALUES (3, 'Producto Z', 15.50, 80);
INSERT INTO PRODUCTO (idProducto, nombre, precio, stock) VALUES (4, 'Producto W', 8.99, 120);
INSERT INTO PRODUCTO (idProducto, nombre, precio, stock) VALUES (5, 'Producto V', 12.75, 60);

-- Insertar datos en la tabla PEDIDO
INSERT INTO PEDIDO (IDPEDIDO, ESTADO, FECHA_COMPRA) VALUES (1, 'En proceso', '06/05/2024');
INSERT INTO PEDIDO (IDPEDIDO, ESTADO, FECHA_COMPRA) VALUES (2, 'Entregado', '05/05/2024');
INSERT INTO PEDIDO (IDPEDIDO, ESTADO, FECHA_COMPRA) VALUES (3, 'Entregado', '06/05/2024');
INSERT INTO PEDIDO (IDPEDIDO, ESTADO, FECHA_COMPRA) VALUES (4, 'En proceso', '03/05/2024');
INSERT INTO PEDIDO (IDPEDIDO, ESTADO, FECHA_COMPRA) VALUES (5, 'Entregado', '02/05/2024');


-- Insertar datos en la tabla LINEA_PEDIDO
INSERT INTO LINEA_PEDIDO (IDLINEAP, UNIDADES, IDPEDIDO) VALUES (1, 5, 1);
INSERT INTO LINEA_PEDIDO (IDLINEAP, UNIDADES, IDPEDIDO) VALUES (2, 3, 2);

-- Insertar datos en la tabla FACTURA
INSERT INTO FACTURA (IDFACTURA, FECHA, TOTAL, METODO_PAGO) VALUES (1, '06/05/2024', 50.00, 'Efectivo');
INSERT INTO FACTURA (IDFACTURA, FECHA, TOTAL, METODO_PAGO) VALUES (2, '05/05/2024', 30.00, 'Tarjeta');
INSERT INTO FACTURA (IDFACTURA, FECHA, TOTAL, METODO_PAGO) VALUES (3, '04/05/2024', 75.00, 'Tarjeta');
INSERT INTO FACTURA (IDFACTURA, FECHA, TOTAL, METODO_PAGO) VALUES (4, '03/05/2024', 45.50, 'Efectivo');
INSERT INTO FACTURA (IDFACTURA, FECHA, TOTAL, METODO_PAGO) VALUES (5, '02/05/2024', 60.25, 'Tarjeta');

-- Insertar datos en la tabla LINEA_FACTURA
INSERT INTO LINEA_FACTURA (IDFACTURA, IDLINEAF) VALUES (1, 1);
INSERT INTO LINEA_FACTURA (IDFACTURA, IDLINEAF) VALUES (2, 2);

-- Insertar datos en la tabla TRATAMIENTO_CAPILAR
INSERT INTO TRATAMIENTO_CAPILAR (NOMBRE, PRECIO, DURACION) VALUES ('Tratamiento A', 20.00, 30);
INSERT INTO TRATAMIENTO_CAPILAR (NOMBRE, PRECIO, DURACION) VALUES ('Tratamiento B', 30.00, 45);
INSERT INTO TRATAMIENTO_CAPILAR (NOMBRE, PRECIO, DURACION) VALUES ('Tratamiento C', 25.00, 40);
INSERT INTO TRATAMIENTO_CAPILAR (NOMBRE, PRECIO, DURACION) VALUES ('Tratamiento D', 35.00, 60);
INSERT INTO TRATAMIENTO_CAPILAR (NOMBRE, PRECIO, DURACION) VALUES ('Tratamiento E', 30.00, 50);
 
-- Insertar datos en la tabla CLIENTE
INSERT INTO CLIENTE (IDCLIENTE, NOMBRE, APE1, APE2, TELEFONO) VALUES (1, 'Juan', 'Pérez', 'Gómez', 123456789);
INSERT INTO CLIENTE (IDCLIENTE, NOMBRE, APE1, APE2, TELEFONO) VALUES (2, 'María', 'López', NULL, 987654321);
INSERT INTO CLIENTE (IDCLIENTE, NOMBRE, APE1, APE2, TELEFONO) VALUES (3, 'Ana', 'García', 'López', 555123456);
INSERT INTO CLIENTE (IDCLIENTE, NOMBRE, APE1, APE2, TELEFONO) VALUES (4, 'Pedro', 'Martínez', 'Sánchez', 555987654);
INSERT INTO CLIENTE (IDCLIENTE, NOMBRE, APE1, APE2, TELEFONO) VALUES (5, 'Laura', 'Díaz', 'Fernández', 555111222);

-- Insertar datos en la tabla SERVICIOS
INSERT INTO SERVICIOS (IDSERVICIO, IDPRODUCTO_FK, NOMBRE_FK) VALUES (1, 1, 'Tratamiento A');
INSERT INTO SERVICIOS (IDSERVICIO, IDPRODUCTO_FK, NOMBRE_FK) VALUES (2, 2, 'Tratamiento B');
INSERT INTO SERVICIOS (IDSERVICIO, IDPRODUCTO_FK, NOMBRE_FK) VALUES (3, 3, 'Tratamiento C');
INSERT INTO SERVICIOS (IDSERVICIO, IDPRODUCTO_FK, NOMBRE_FK) VALUES (4, 4, 'Tratamiento D');
INSERT INTO SERVICIOS (IDSERVICIO, IDPRODUCTO_FK, NOMBRE_FK) VALUES (5, 5, 'Tratamiento E');

-- Insertar datos en la tabla VENDE
INSERT INTO VENDE (CANTIDAD, PRECIO_TOTAL, IDPROVEEDOR_FK, IDPRODUCTOV_FK) VALUES (10, 109.90, 1, 1);
INSERT INTO VENDE (CANTIDAD, PRECIO_TOTAL, IDPROVEEDOR_FK, IDPRODUCTOV_FK) VALUES (5, 29.95, 2, 2);

-- Insertar datos en la tabla GENERA
INSERT INTO GENERA (IDSERVICIOG_FK, IDFACTURAG_FK) VALUES (1, 1);
INSERT INTO GENERA (IDSERVICIOG_FK, IDFACTURAG_FK) VALUES (2, 2);

-- Insertar datos en la tabla PIDE_CITA
INSERT INTO PIDE_CITA (NOMBREC_FK, IDCLIENTE_FK, ESTADO, FECHA_CITA) VALUES ('Tratamiento A', 1, 'Pendiente', TO_DATE('08/06/2024 14:30', 'DD/MM/YYYY HH24:MI'));
INSERT INTO PIDE_CITA (NOMBREC_FK, IDCLIENTE_FK, ESTADO, FECHA_CITA) VALUES ('Tratamiento B', 2, 'Confirmada',  TO_DATE('07/06/2024 13:00', 'DD/MM/YYYY HH24:MI'));
INSERT INTO PIDE_CITA (NOMBREC_FK, IDCLIENTE_FK, ESTADO, FECHA_CITA) VALUES ('Tratamiento A', 3, 'Pendiente', TO_DATE('08/06/2024 13:30', 'DD/MM/YYYY HH24:MI'));


-- Consultas
-- Mostrar todos los proveedores:
SELECT * FROM PROVEEDOR;

-- Mostrar todos los productos con su precio y stock:
SELECT nombre, precio, stock FROM PRODUCTO;

-- Mostrar todos los pedidos y su estado:
SELECT IDPEDIDO, ESTADO FROM PEDIDO;

-- Mostrar la cantidad de unidades y la fecha de compra para cada pedido:
SELECT PEDIDO.IDPEDIDO, SUM(UNIDADES) AS Total_Unidades, FECHA_COMPRA
FROM LINEA_PEDIDO
JOIN PEDIDO ON LINEA_PEDIDO.IDPEDIDO = PEDIDO.IDPEDIDO
GROUP BY PEDIDO.IDPEDIDO, FECHA_COMPRA;

-- Mostrar el total de ventas y el método de pago para cada factura:
SELECT IDFACTURA, TOTAL, METODO_PAGO FROM FACTURA;

-- Mostrar el nombre del cliente y el tratamiento solicitado para cada cita pendiente:
SELECT CLIENTE.NOMBRE, PIDE_CITA.NOMBREC_FK 
FROM PIDE_CITA 
JOIN CLIENTE ON PIDE_CITA.IDCLIENTE_FK = CLIENTE.IDCLIENTE
WHERE ESTADO = 'Pendiente';

-- Mostrar el nombre del tratamiento, el precio y la duración para cada servicio:
SELECT NOMBRE_FK, PRECIO, DURACION FROM TRATAMIENTO_CAPILAR
JOIN SERVICIOS ON TRATAMIENTO_CAPILAR.NOMBRE = SERVICIOS.NOMBRE_FK;

-- Mostrar la cantidad de productos vendidos y el proveedor correspondiente para cada venta:
SELECT CANTIDAD, PROVEEDOR.nombre AS Proveedor 
FROM VENDE 
JOIN PROVEEDOR ON VENDE.IDPROVEEDOR_FK = PROVEEDOR.idProveedor;

-- Mostrar el nombre del tratamiento y la fecha de cita para cada cita pendiente:
SELECT TRATAMIENTO_CAPILAR.NOMBRE, TO_CHAR(PIDE_CITA.FECHA_CITA, 'DD/MM/YYYY HH24:MI')
FROM PIDE_CITA
JOIN TRATAMIENTO_CAPILAR ON PIDE_CITA.NOMBREC_FK =
TRATAMIENTO_CAPILAR.NOMBRE
WHERE ESTADO = 'Pendiente';

-- Mostrar el nombre del cliente y la cantidad de tratamientos solicitados para cada cliente:
SELECT CLIENTE.NOMBRE, COUNT(*) AS Total_Tratamientos
FROM PIDE_CITA
JOIN CLIENTE ON PIDE_CITA.IDCLIENTE_FK = CLIENTE.IDCLIENTE
GROUP BY CLIENTE.NOMBRE;


-- Procedimiento
CREATE OR REPLACE PROCEDURE PROCESAR_VENTA(
    p_cantidad IN NUMBER,
    p_precio_total IN NUMBER,
    p_idproveedor IN NUMBER,
    p_idproducto IN NUMBER
) AS
    v_stock NUMBER;
BEGIN
    -- Obtener el stock del producto
    SELECT STOCK INTO v_stock
    FROM PRODUCTO
    WHERE IDPRODUCTO = p_idproducto;
    -- Verificar si el stock es mayor a 10
    IF v_stock > 10 THEN
        -- Proceder con la inserción en la tabla VENDE
        INSERT INTO VENDE (CANTIDAD, PRECIO_TOTAL, IDPROVEEDOR_FK, IDPRODUCTOV_FK)
        VALUES (p_cantidad, p_precio_total, p_idproveedor, p_idproducto);
    ELSE
        -- Lanzar un error si el stock es insuficiente
        RAISE_APPLICATION_ERROR(-20005, 'No se puede realizar la venta. El stock del producto es menor o igual a 10.');
    END IF;
END;
/
-- Disparador.
-- El disparador TRG_CHECK_STOCK_BEFORE_VENTA utilizará el procedimiento PROCESAR_VENTA antes de insertar una venta en la tabla VENDE.
CREATE OR REPLACE TRIGGER TRG_CHECK_STOCK_BEFORE_VENTA
INSTEAD OF INSERT ON VENDE
FOR EACH ROW
BEGIN
    -- Llamar al procedimiento para procesar la venta
    PROCESAR_VENTA(
        :NEW.CANTIDAD,
        :NEW.PRECIO_TOTAL,
        :NEW.IDPROVEEDOR_FK,
        :NEW.IDPRODUCTOV_FK
    );
END;
/

